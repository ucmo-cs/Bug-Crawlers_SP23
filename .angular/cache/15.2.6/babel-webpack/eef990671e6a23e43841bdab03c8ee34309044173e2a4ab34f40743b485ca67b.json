{"ast":null,"code":"import * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nconst EXCEL_EXTENSION = '.xlsx';\nconst CSV_EXTENSION = '.csv';\nconst CSV_TYPE = 'text/plain;charset=utf-8';\nexport let MasterService = /*#__PURE__*/(() => {\n  class MasterService {\n    constructor() {}\n    csvDownload(headers, globalData) {\n      if (!globalData || !globalData.length) return;\n      const separator = ',';\n      const csvContent = headers.join(separator) + '\\n' + globalData.map(rowData => {\n        return headers.map(headKey => {\n          return rowData[headKey.toLowerCase().replaceAll(' ', '_')] === null || rowData[headKey.toLowerCase().replaceAll(' ', '_')] === undefined ? '' : rowData[headKey.toLowerCase().replaceAll(' ', '_')];\n        }).join(separator);\n      }).join('\\n');\n      this.exportFile(csvContent, 'text/csv');\n    }\n    exportFile(data, fileType) {\n      const blob = new Blob([data], {\n        type: fileType\n      });\n      FileSaver.saveAs(blob, `Employee Data`);\n    }\n    saveAsFile(buffer, fileName, fileType) {\n      const data = new Blob([buffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, fileName);\n    }\n    exportToCsv(rows, fileName, columns) {\n      if (!rows || !rows.length) {\n        return;\n      }\n      const separator = ',';\n      const keys = Object.keys(rows[0]).filter(k => {\n        if (columns?.length) {\n          return columns.includes(k);\n        } else {\n          return true;\n        }\n      });\n      const csvContent = keys.join(separator) + '\\n' + rows.map(row => {\n        return keys.map(k => {\n          let cell = row[k] === null || row[k] === undefined ? '' : row[k];\n          cell = cell instanceof Date ? cell.toLocaleString() : cell.toString().replace(/\"/g, '\"\"');\n          if (cell.search(/(\"|,|\\n)/g) >= 0) {\n            cell = `\"${cell}\"`;\n          }\n          return cell;\n        }).join(separator);\n      }).join('\\n');\n      this.saveAsFile(csvContent, `${fileName}${CSV_EXTENSION}`, CSV_TYPE);\n    }\n    exportTableElmToExcel(element, fileName) {\n      const ws = XLSX.utils.table_to_sheet(element.nativeElement);\n      // generate workbook and add the worksheet\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, ws, 'Sheet1');\n      // save to file\n      XLSX.writeFile(workbook, `${fileName}${EXCEL_EXTENSION}`);\n    }\n    exportJsonToExcel(json, fileName) {\n      // inserting first blank row\n      const worksheet = XLSX.utils.json_to_sheet(json[0].data, this.getOptions(json[0]));\n      for (let i = 1, length = json.length; i < length; i++) {\n        // adding a dummy row for separation\n        XLSX.utils.sheet_add_json(worksheet, [{}], this.getOptions({\n          data: [],\n          skipHeader: true\n        }, -1));\n        XLSX.utils.sheet_add_json(worksheet, json[i].data, this.getOptions(json[i], -1));\n      }\n      const workbook = {\n        Sheets: {\n          Sheet1: worksheet\n        },\n        SheetNames: ['Sheet1']\n      };\n      // save to file\n      XLSX.writeFile(workbook, `${fileName}${EXCEL_EXTENSION}`);\n    }\n    getOptions(json, origin) {\n      // adding actual data\n      const options = {\n        skipHeader: true,\n        origin: -1,\n        header: []\n      };\n      options.skipHeader = json.skipHeader ? json.skipHeader : false;\n      if (!options.skipHeader && json.header && json.header.length) {\n        options.header = json.header;\n      }\n      if (origin) {\n        options.origin = origin ? origin : -1;\n      }\n      return options;\n    }\n  }\n  MasterService.ɵfac = function MasterService_Factory(t) {\n    return new (t || MasterService)();\n  };\n  MasterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MasterService,\n    factory: MasterService.ɵfac,\n    providedIn: 'root'\n  });\n  return MasterService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}