{"ast":null,"code":"import * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nconst EXCEL_EXTENSION = '.xlsx';\nconst CSV_EXTENSION = '.csv';\nconst CSV_TYPE = 'text/plain;charset=utf-8';\nexport class MasterService {\n  constructor() {}\n  csvDownload(headers, globalData) {\n    if (!globalData || !globalData.length) return;\n    const separator = ',';\n    const csvContent = headers.join(separator) + '\\n' + globalData.map(rowData => {\n      return headers.map(headKey => {\n        return rowData[headKey.toLowerCase().replaceAll(' ', '_')] === null || rowData[headKey.toLowerCase().replaceAll(' ', '_')] === undefined ? '' : rowData[headKey.toLowerCase().replaceAll(' ', '_')];\n      }).join(separator);\n    }).join('\\n');\n    this.exportFile(csvContent, 'text/csv');\n  }\n  exportFile(data, fileType) {\n    const blob = new Blob([data], {\n      type: fileType\n    });\n    FileSaver.saveAs(blob, `Employee Data`);\n  }\n  saveAsFile(buffer, fileName, fileType) {\n    const data = new Blob([buffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, fileName);\n  }\n  exportToCsv(rows, fileName, columns) {\n    if (!rows || !rows.length) {\n      return;\n    }\n    const separator = ',';\n    const keys = Object.keys(rows[0]).filter(k => {\n      if (columns?.length) {\n        return columns.includes(k);\n      } else {\n        return true;\n      }\n    });\n    const csvContent = keys.join(separator) + '\\n' + rows.map(row => {\n      return keys.map(k => {\n        let cell = row[k] === null || row[k] === undefined ? '' : row[k];\n        cell = cell instanceof Date ? cell.toLocaleString() : cell.toString().replace(/\"/g, '\"\"');\n        if (cell.search(/(\"|,|\\n)/g) >= 0) {\n          cell = `\"${cell}\"`;\n        }\n        return cell;\n      }).join(separator);\n    }).join('\\n');\n    this.saveAsFile(csvContent, `${fileName}${CSV_EXTENSION}`, CSV_TYPE);\n  }\n  exportTableElmToExcel(element, fileName) {\n    const ws = XLSX.utils.table_to_sheet(element.nativeElement);\n    // generate workbook and add the worksheet\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, ws, 'Sheet1');\n    // save to file\n    XLSX.writeFile(workbook, `${fileName}${EXCEL_EXTENSION}`);\n  }\n  exportJsonToExcel(json, fileName) {\n    // inserting first blank row\n    const worksheet = XLSX.utils.json_to_sheet(json[0].data, this.getOptions(json[0]));\n    for (let i = 1, length = json.length; i < length; i++) {\n      // adding a dummy row for separation\n      XLSX.utils.sheet_add_json(worksheet, [{}], this.getOptions({\n        data: [],\n        skipHeader: true\n      }, -1));\n      XLSX.utils.sheet_add_json(worksheet, json[i].data, this.getOptions(json[i], -1));\n    }\n    const workbook = {\n      Sheets: {\n        Sheet1: worksheet\n      },\n      SheetNames: ['Sheet1']\n    };\n    // save to file\n    XLSX.writeFile(workbook, `${fileName}${EXCEL_EXTENSION}`);\n  }\n  getOptions(json, origin) {\n    // adding actual data\n    const options = {\n      skipHeader: true,\n      origin: -1,\n      header: []\n    };\n    options.skipHeader = json.skipHeader ? json.skipHeader : false;\n    if (!options.skipHeader && json.header && json.header.length) {\n      options.header = json.header;\n    }\n    if (origin) {\n      options.origin = origin ? origin : -1;\n    }\n    return options;\n  }\n}\nMasterService.ɵfac = function MasterService_Factory(t) {\n  return new (t || MasterService)();\n};\nMasterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MasterService,\n  factory: MasterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["FileSaver","XLSX","EXCEL_EXTENSION","CSV_EXTENSION","CSV_TYPE","MasterService","constructor","csvDownload","headers","globalData","length","separator","csvContent","join","map","rowData","headKey","toLowerCase","replaceAll","undefined","exportFile","data","fileType","blob","Blob","type","saveAs","saveAsFile","buffer","fileName","exportToCsv","rows","columns","keys","Object","filter","k","includes","row","cell","Date","toLocaleString","toString","replace","search","exportTableElmToExcel","element","ws","utils","table_to_sheet","nativeElement","workbook","book_new","book_append_sheet","writeFile","exportJsonToExcel","json","worksheet","json_to_sheet","getOptions","i","sheet_add_json","skipHeader","Sheets","Sheet1","SheetNames","origin","options","header","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mceth\\proj\\RisenOne\\src\\app\\service\\master.service.ts"],"sourcesContent":["import { Injectable, ElementRef } from '@angular/core';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { ExcelJson } from '../interfaces/excel-json.interface';\n\nconst EXCEL_EXTENSION = '.xlsx';\nconst CSV_EXTENSION = '.csv';\nconst CSV_TYPE = 'text/plain;charset=utf-8';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MasterService {\n\n  constructor() { }\n\n  csvDownload(headers: any, globalData: any){\n    if(!globalData || !globalData.length)\n      return;\n\n    const separator = ',';\n    const csvContent: any = \n    headers.join(separator) + '\\n' +\n    globalData\n    .map((rowData: any) => {\n      return headers\n    .map((headKey: any) => {\n      return rowData[headKey.toLowerCase().replaceAll(' ', '_')]\n      === null || \n      rowData[headKey.toLowerCase().replaceAll(' ', '_')]\n      === undefined ? '':\n      rowData[headKey.toLowerCase().replaceAll(' ', '_')];\n    })\n    .join(separator);\n  })\n    .join('\\n');\n    \n\n    this.exportFile(csvContent, 'text/csv');\n  }\n\n  exportFile(data:any, fileType: any){\n    const blob = new Blob([data], {type: fileType})\n    FileSaver.saveAs(blob, `Employee Data`);\n  }\n\n  \n\n  private saveAsFile(buffer: any, fileName: string, fileType: string): void {\n    const data: Blob = new Blob([buffer], { type: fileType });\n    FileSaver.saveAs(data, fileName);\n  }\n\n  public exportToCsv(rows: object[], fileName: string, columns?: string[]): string {\n    if (!rows || !rows.length) {\n      return;\n    }\n    const separator = ',';\n    const keys = Object.keys(rows[0]).filter(k => {\n      if (columns?.length) {\n        return columns.includes(k);\n      } else {\n        return true;\n      }\n    });\n    const csvContent =\n      keys.join(separator) +\n      '\\n' +\n      rows.map(row => {\n        return keys.map(k => {\n          let cell = row[k] === null || row[k] === undefined ? '' : row[k];\n          cell = cell instanceof Date\n            ? cell.toLocaleString()\n            : cell.toString().replace(/\"/g, '\"\"');\n          if (cell.search(/(\"|,|\\n)/g) >= 0) {\n            cell = `\"${cell}\"`;\n          }\n          return cell;\n        }).join(separator);\n      }).join('\\n');\n    this.saveAsFile(csvContent, `${fileName}${CSV_EXTENSION}`, CSV_TYPE);\n  }\n\n  public exportTableElmToExcel(element: ElementRef, fileName: string): void {\n    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(element.nativeElement);\n    // generate workbook and add the worksheet\n    const workbook: XLSX.WorkBook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, ws, 'Sheet1');\n    // save to file\n    XLSX.writeFile(workbook, `${fileName}${EXCEL_EXTENSION}`);\n\n  }\n\n  public exportJsonToExcel(json: ExcelJson[], fileName: string): void {\n    // inserting first blank row\n    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(\n      json[0].data,\n      this.getOptions(json[0])\n    );\n\n    for (let i = 1, length = json.length; i < length; i++) {\n      // adding a dummy row for separation\n      XLSX.utils.sheet_add_json(\n        worksheet,\n        [{}],\n        this.getOptions(\n          {\n            data: [],\n            skipHeader: true\n          }, -1)\n      );\n      XLSX.utils.sheet_add_json(\n        worksheet,\n        json[i].data,\n        this.getOptions(json[i], -1)\n      );\n    }\n    const workbook: XLSX.WorkBook = { Sheets: { Sheet1: worksheet }, SheetNames: ['Sheet1'] };\n    // save to file\n    XLSX.writeFile(workbook, `${fileName}${EXCEL_EXTENSION}`);\n  }\n\n  private getOptions(json: ExcelJson, origin?: number): any {\n    // adding actual data\n    const options = {\n      skipHeader: true,\n      origin: -1,\n      header: []\n    };\n    options.skipHeader = json.skipHeader ? json.skipHeader : false;\n    if (!options.skipHeader && json.header && json.header.length) {\n      options.header = json.header;\n    }\n    if (origin) {\n      options.origin = origin ? origin : -1;\n    }\n    return options;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}