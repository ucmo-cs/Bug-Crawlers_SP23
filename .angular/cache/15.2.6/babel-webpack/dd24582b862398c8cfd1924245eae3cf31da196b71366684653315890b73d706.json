{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { PopUpComponent } from './pop-up/pop-up.component';\nconst REPORT_DATA = [{\n  date: '4/7/23',\n  projects: 'FLP; FEMA',\n  reportStatus: 'Missing'\n}, {\n  date: '4/6/23',\n  projects: 'FLP; FEMA',\n  reportStatus: 'Submitted'\n}];\nlet AppComponent = class AppComponent {\n  constructor(dialogRef, sharedService, http) {\n    this.dialogRef = dialogRef;\n    this.sharedService = sharedService;\n    this.http = http;\n    this.title = 'RisenOne';\n    this.sort = null;\n    this.paginator = null;\n    this.displayedColumns = ['date', 'projects', 'reportStatus'];\n    this.dataSource = new MatTableDataSource(REPORT_DATA);\n    this.filterText = '';\n    this.TableItemUrl = 'https://fpvsdbdjs6.execute-api.us-east-2.amazonaws.com/dev/getTable';\n  }\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  ngOnInit() {\n    this.http.get(this.TableItemUrl).subscribe({\n      next: data => {\n        console.log(data);\n        this.tableItem = data;\n      },\n      error: err => {\n        console.log(err);\n        this.tableItem = 'Error invoking API';\n      }\n    });\n    this.dataSource.sort = this.sort;\n    this.users = [{\n      date: '4/21/2023',\n      reportText: 'test'\n    }, {\n      date: '4/20/2023',\n      reportText: 'test'\n    }, {\n      date: '4/19/2023',\n      reportText: 'test'\n    }];\n  }\n  openDialog() {\n    this.dialogRef.open(PopUpComponent);\n  }\n  closeDialog() {\n    this.dialogRef.closeAll();\n  }\n  Filterchange(event) {\n    const filvalue = event.target.value;\n    this.dataSource.filter = filvalue;\n  }\n  downloadCSV() {\n    this.sharedService.csvDownload(this.displayedColumns, REPORT_DATA);\n  }\n  exportElmToExcel() {\n    this.sharedService.exportTableElmToExcel(this.userTable, 'user_data');\n  }\n  exportToExcel() {\n    const edata = [];\n    const udt = {\n      data: [{\n        A: 'User Data'\n      }, {\n        A: 'date',\n        B: 'Report Text'\n      } // table header\n      ],\n\n      skipHeader: true\n    };\n    this.users.forEach(user => {\n      udt.data.push({\n        A: user.date,\n        B: user.reportText\n      });\n    });\n    edata.push(udt);\n    this.sharedService.exportJsonToExcel(edata, 'user_data');\n  }\n};\n__decorate([ViewChild(MatSort)], AppComponent.prototype, \"sort\", void 0);\n__decorate([ViewChild(MatPaginator)], AppComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild('userTable')], AppComponent.prototype, \"userTable\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","MatPaginator","MatTableDataSource","MatSort","PopUpComponent","REPORT_DATA","date","projects","reportStatus","AppComponent","constructor","dialogRef","sharedService","http","ngAfterViewInit","dataSource","paginator","sort","ngOnInit","get","TableItemUrl","subscribe","next","data","console","log","tableItem","error","err","users","reportText","openDialog","open","closeDialog","closeAll","Filterchange","event","filvalue","target","value","filter","downloadCSV","csvDownload","displayedColumns","exportElmToExcel","exportTableElmToExcel","userTable","exportToExcel","edata","udt","A","B","skipHeader","forEach","user","push","exportJsonToExcel","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ltjoh\\OneDrive\\Documents\\UCM\\1Senior Project\\RisenOne\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, ViewChild, OnInit, ElementRef } from '@angular/core';\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { MatSort, Sort } from \"@angular/material/sort\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { PopUpComponent } from './pop-up/pop-up.component';\nimport { MasterService } from './service/master.service';\nimport { User } from './interfaces/user.interface';\nimport { ExcelJson } from './interfaces/excel-json.interface';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface Report {\n  date: string;\n  projects: string;\n  reportStatus: string;\n}\n\nconst REPORT_DATA: Report[] = [\n  {date: '4/7/23', projects: 'FLP; FEMA', reportStatus: 'Missing'},\n  {date: '4/6/23', projects: 'FLP; FEMA', reportStatus: 'Submitted' },\n];\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'RisenOne';\n  @ViewChild(MatSort) sort: MatSort | null = null;\n  @ViewChild(MatPaginator) paginator: MatPaginator | null = null;\n  displayedColumns: string[] = ['date', 'projects', 'reportStatus'];\n  dataSource = new MatTableDataSource(REPORT_DATA);\n  filterText:string = '';\n  users: User[];\n  @ViewChild('userTable') userTable: ElementRef;\n\n  tableItem:any;\n  TableItemUrl = 'https://fpvsdbdjs6.execute-api.us-east-2.amazonaws.com/dev/getTable';\n\n  constructor(private dialogRef: MatDialog, private sharedService: MasterService, private http:HttpClient){\n\n  }\n\n  ngAfterViewInit(){\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  ngOnInit(){\n    this.http.get(this.TableItemUrl).subscribe({\n      next: data => {\n        console.log(data);\n        this.tableItem = data;\n      },\n      error: err => {\n        console.log(err);\n        this.tableItem = 'Error invoking API';\n      }\n    });\n    this.dataSource.sort = this.sort;\n\n      this.users = [\n        {\n          date:'4/21/2023',\n          reportText:'test'\n        },\n        {\n          date:'4/20/2023',\n          reportText:'test'\n        },\n        {\n          date:'4/19/2023',\n          reportText:'test'\n        }\n      ];\n  }\n\n  openDialog(){\n    this.dialogRef.open(PopUpComponent);\n  }\n  closeDialog(){\n    this.dialogRef.closeAll();\n  }\n\n  Filterchange(event:Event){\n    const filvalue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filvalue;\n  }\n\n  downloadCSV(){\n    this.sharedService.csvDownload(this.displayedColumns, REPORT_DATA);\n  }\n\n  exportElmToExcel(): void {\n    this.sharedService.exportTableElmToExcel(this.userTable, 'user_data');\n  }\n\n  exportToExcel(): void {\n\n    const edata: Array<ExcelJson> = [];\n    const udt: ExcelJson = {\n      data: [\n        { A: 'User Data' }, // title\n        { A: 'date', B: 'Report Text' }, // table header\n      ],\n      skipHeader: true\n    };\n    this.users.forEach(user => {\n      udt.data.push({\n        A: user.date,\n        B: user.reportText\n      });\n    });\n    edata.push(udt);\n\n    this.sharedService.exportJsonToExcel(edata, 'user_data');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}